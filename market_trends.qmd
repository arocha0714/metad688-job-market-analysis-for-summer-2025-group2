---
title: Market Trends
---

# Geographic Distribution of Analyst Jobs

This analysis shows the nationwide distribution of analyst jobs across all US states using an interactive choropleth map.

```{python}
import pandas as pd
import plotly.express as px
import plotly.io as pio

# Load the data
df = pd.read_csv("./data/lightcast_job_postings.csv")

# Create nationwide data - filter for analyst jobs
all_states_df = df[df['LOT_SPECIALIZED_OCCUPATION_NAME'].str.contains('analyst', case=False, na=False)]

# Group by all states and count jobs
all_state_counts = all_states_df.groupby('STATE_NAME').size().reset_index(name='job_count')
all_state_counts_sorted = all_state_counts.sort_values(by='job_count', ascending=False)

print("Top 10 states with most analyst jobs:")
print(all_state_counts_sorted.head(10))
print(f"\nTotal states with analyst jobs: {len(all_state_counts_sorted)}")

# Comprehensive state abbreviation mapping
state_abbrev_map = {
    'Alabama': 'AL', 'Alaska': 'AK', 'Arizona': 'AZ', 'Arkansas': 'AR', 'California': 'CA',
    'Colorado': 'CO', 'Connecticut': 'CT', 'Delaware': 'DE', 'Florida': 'FL', 'Georgia': 'GA',
    'Hawaii': 'HI', 'Idaho': 'ID', 'Illinois': 'IL', 'Indiana': 'IN', 'Iowa': 'IA',
    'Kansas': 'KS', 'Kentucky': 'KY', 'Louisiana': 'LA', 'Maine': 'ME', 'Maryland': 'MD',
    'Massachusetts': 'MA', 'Michigan': 'MI', 'Minnesota': 'MN', 'Mississippi': 'MS', 'Missouri': 'MO',
    'Montana': 'MT', 'Nebraska': 'NE', 'Nevada': 'NV', 'New Hampshire': 'NH', 'New Jersey': 'NJ',
    'New Mexico': 'NM', 'New York': 'NY', 'North Carolina': 'NC', 'North Dakota': 'ND', 'Ohio': 'OH',
    'Oklahoma': 'OK', 'Oregon': 'OR', 'Pennsylvania': 'PA', 'Rhode Island': 'RI', 'South Carolina': 'SC',
    'South Dakota': 'SD', 'Tennessee': 'TN', 'Texas': 'TX', 'Utah': 'UT', 'Vermont': 'VT',
    'Virginia': 'VA', 'Washington': 'WA', 'West Virginia': 'WV', 'Wisconsin': 'WI', 'Wyoming': 'WY',
    'District of Columbia': 'DC'
}

# Add state abbreviations to the data
all_state_counts_sorted['state_abbrev'] = all_state_counts_sorted['STATE_NAME'].map(state_abbrev_map)

# Filter out any states that couldn't be mapped (in case of data issues)
mapped_states = all_state_counts_sorted.dropna(subset=['state_abbrev'])

print(f"\nStates successfully mapped: {len(mapped_states)}")
if len(mapped_states) < len(all_state_counts_sorted):
    unmapped = all_state_counts_sorted[all_state_counts_sorted['state_abbrev'].isna()]
    print("Unmapped states:")
    print(unmapped['STATE_NAME'].tolist())

# Create a choropleth map showing job counts for all states
fig = px.choropleth(
    mapped_states,
    locations='state_abbrev',
    color='job_count',
    locationmode='USA-states',
    color_continuous_scale='Greens',
    labels={'job_count': 'Number of Jobs', 'STATE_NAME': 'State'},
    hover_name='STATE_NAME',
    hover_data={'state_abbrev': False, 'job_count': True}
)

# Update layout with no title to maximize map space
fig.update_layout(
    geo_scope='usa',
    width=1000,
    height=700,
    margin=dict(t=5, b=5, l=5, r=5),  # Minimal margins on all sides
    geo=dict(
        projection_type='albers usa',
        showlakes=True,
        lakecolor='rgb(255, 255, 255)',
        bgcolor='rgba(0,0,0,0)'
    )
)

# Show the interactive map
fig.show()
```
