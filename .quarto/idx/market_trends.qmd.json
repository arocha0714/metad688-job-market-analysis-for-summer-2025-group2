{"title":"Market Trends","markdown":{"yaml":{"title":"Market Trends"},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\nOur group has decided to evaluate the distribution of jobs related to techonology across the United States. In order to do this, we used a count of any jobs containing the word \"analyst\" and categorized them by state. The results of this are shown below.\n\n<div style=\"text-align: center; font-size: 18px; font-weight: bold; margin: 20px 0 40px 0;\">\nAnalyst Job Distribution Across the United States\n</div>\n\n```{python}\n#| eval: false\n#| echo: false\n#| warning: false\n#| fig-cap: \"Analyst Job Distribution Across the United States\"\n#| fig-align: center\n#| label: fig-analyst-distribution\nimport pandas as pd\nimport plotly.express as px\nimport plotly.io as pio\nimport plotly.graph_objects as go\n\n# Configure plotly for CI environments - use notebook renderer\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_white\"\n\n# Additional configuration for Quarto\nimport plotly.offline as pyo\npyo.init_notebook_mode(connected=True)\n\n# Load the data\ndf = pd.read_csv(\"./data/lightcast_job_postings.csv\")\n\n# Create nationwide data - filter for analyst jobs\nall_states_df = df[df['LOT_SPECIALIZED_OCCUPATION_NAME'].str.contains('analyst', case=False, na=False)]\n\n# Group by all states and count jobs\nall_state_counts = all_states_df.groupby('STATE_NAME').size().reset_index(name='job_count')\nall_state_counts_sorted = all_state_counts.sort_values(by='job_count', ascending=False)\n\n# Comprehensive state abbreviation mapping\nstate_abbrev_map = {\n    'Alabama': 'AL', 'Alaska': 'AK', 'Arizona': 'AZ', 'Arkansas': 'AR', 'California': 'CA',\n    'Colorado': 'CO', 'Connecticut': 'CT', 'Delaware': 'DE', 'Florida': 'FL', 'Georgia': 'GA',\n    'Hawaii': 'HI', 'Idaho': 'ID', 'Illinois': 'IL', 'Indiana': 'IN', 'Iowa': 'IA',\n    'Kansas': 'KS', 'Kentucky': 'KY', 'Louisiana': 'LA', 'Maine': 'ME', 'Maryland': 'MD',\n    'Massachusetts': 'MA', 'Michigan': 'MI', 'Minnesota': 'MN', 'Mississippi': 'MS', 'Missouri': 'MO',\n    'Montana': 'MT', 'Nebraska': 'NE', 'Nevada': 'NV', 'New Hampshire': 'NH', 'New Jersey': 'NJ',\n    'New Mexico': 'NM', 'New York': 'NY', 'North Carolina': 'NC', 'North Dakota': 'ND', 'Ohio': 'OH',\n    'Oklahoma': 'OK', 'Oregon': 'OR', 'Pennsylvania': 'PA', 'Rhode Island': 'RI', 'South Carolina': 'SC',\n    'South Dakota': 'SD', 'Tennessee': 'TN', 'Texas': 'TX', 'Utah': 'UT', 'Vermont': 'VT',\n    'Virginia': 'VA', 'Washington': 'WA', 'West Virginia': 'WV', 'Wisconsin': 'WI', 'Wyoming': 'WY',\n    'District of Columbia': 'DC'\n}\n\n# Add state abbreviations to the data\nall_state_counts_sorted['state_abbrev'] = all_state_counts_sorted['STATE_NAME'].map(state_abbrev_map)\n\n# Filter out any states that couldn't be mapped (in case of data issues)\nmapped_states = all_state_counts_sorted.dropna(subset=['state_abbrev'])\n\n# Create a choropleth map showing job counts for all states\nfig = px.choropleth(\n    mapped_states,\n    locations='state_abbrev',\n    color='job_count',\n    locationmode='USA-states',\n    color_continuous_scale=[[0, '#f0f9f9'], [0.2, '#cceeee'], [0.4, '#7dd3c0'], [0.6, '#42b883'], [0.8, '#2c8577'], [1, '#1a5d56']],\n    labels={'job_count': 'Number of Jobs', 'STATE_NAME': 'State'},\n    hover_name='STATE_NAME',\n    hover_data={'state_abbrev': False, 'job_count': True},\n    range_color=[0, mapped_states['job_count'].max()]\n)\n\n# Update layout with no title to maximize map space\nfig.update_layout(\n    geo_scope='usa',\n    width=750,\n    height=400,\n    margin=dict(t=0, b=0, l=0, r=0),\n    geo=dict(\n        projection_type='albers usa',\n        showlakes=True,\n        domain=dict(x=[0, 0.95], y=[0, 1]),\n        lakecolor='rgb(255, 255, 255)',\n        bgcolor='rgba(0,0,0,0)'\n    ),\n    coloraxis_colorbar=dict(\n        len=0.9,  # Make colorbar same height as the plot\n        thickness=20,  # Width of the colorbar\n        x=0.96,  # Position from left edge\n        y=0.5,   # Center vertically\n        yanchor='middle'\n    )\n)\n\n# Show the interactive map\nfig.write_html(\"./figures/analyst_job_distribution.html\", include_plotlyjs='cdn')\n```\n\n```{=html}\n<iframe width=\"1000\" height=\"700\" src=\"./figures/analyst_job_distribution.html\" title=\"Analyst Distribution\"></iframe>\n```\n\nAccording to the visual above, Texas and California are the two clear leaders in the total amount of jobs being offered that contain the word \"analyst\" in the title. Additionally, eastern states show a considerably greater amount of these jobs compared to western states.\n\n\n\n<div style=\"text-align: center; font-size: 18px; font-weight: bold; margin: 20px 0;\">\nAnalyst Job Distribution Across Cities in the United States\n</div>\n\n```{python}\n#| echo: false\n#| eval: false\n#| warning: false\n#| fig-cap: \"Analyst Job Distribution Across Cities in the United States\"\n#| fig-align: center\n#| label: fig-job-distribution-cities\n\n# Filter for analyst jobs from all states (not just the selected 5)\nall_states_analyst_df = df[df['LOT_SPECIALIZED_OCCUPATION_NAME'].str.contains('analyst', case=False, na=False)]\n\n# Group by CITY_NAME and count jobs for analysts\ncity_counts_jobs = all_states_analyst_df.groupby('CITY_NAME').size().reset_index(name='job_count')\n\n# Sort city_counts_jobs from greatest to least by job_count and get top 10\ncity_counts_jobs_sorted = city_counts_jobs.sort_values(by='job_count', ascending=False).head(10)\n\n# Create discrete colors for each bar\ncolors = ['#1a5d56', '#2c8577', '#42b883', '#42b883', '#7dd3c0', '#7dd3c0', '#a8e6cf', '#cceeee', '#f0f9f9', '#f0f9f9']\n\n# Create bar chart using plotly with discrete colors\nfig_cities = go.Figure(data=[\n    go.Bar(\n        x=city_counts_jobs_sorted['CITY_NAME'],\n        y=city_counts_jobs_sorted['job_count'],\n        text=city_counts_jobs_sorted['job_count'],\n        textposition='outside',\n        marker_color=colors[:len(city_counts_jobs_sorted)]\n    )\n])\n\n# Update layout and styling\nfig_cities.update_layout(\n    title='',\n    xaxis_title='City',\n    yaxis_title='Number of Jobs',\n    width=750,\n    height=400,\n    margin=dict(t=20, b=80, l=50, r=50),\n    showlegend=False,\n    xaxis=dict(tickangle=45),\n    template='plotly_white'\n)\n\n# Show the interactive chart\nfig_cities.write_html(\"./figures/job_distribution_cities.html\", include_plotlyjs='cdn')\n```\n\n```{=html}\n<iframe width=\"1000\" height=\"700\" src=\"./figures/job_distribution_cities.html\" title=\"Analyst Distribution\"></iframe>\n```\n\n\n```{python}\nimport plotly.express as px\n\nanalyst_df = df[df['LOT_SPECIALIZED_OCCUPATION_NAME'].str.contains('analyst', case=False, na=False)]\nanalyst_salary_df = analyst_df[analyst_df['SALARY'].notna()]\n\nprint(f\"Total analyst jobs: {len(analyst_df)}\")\nprint(f\"Analyst jobs with salary data: {len(analyst_salary_df)}\")\n\n# Group by state and calculate metrics\nbubble_data = analyst_salary_df.groupby('STATE_NAME').agg({\n    'SALARY': 'mean',  # Average salary for bubble size\n    'STATE_NAME': 'count'  # Count of jobs for y-axis\n}).rename(columns={'STATE_NAME': 'job_count'})\n\nbubble_data = bubble_data.reset_index()\n\nprint(f\"\\nStates with analyst salary data: {len(bubble_data)}\")\nprint(\"\\nTop 10 states by job count:\")\nprint(bubble_data.sort_values('job_count', ascending=False).head(10))\n\n# Filter to top 10 states by job count\ntop_10_states = bubble_data.sort_values('job_count', ascending=False).head(10)\n\n# Create the bubble chart\nfig = px.scatter(\n    top_10_states,\n    x='STATE_NAME',\n    y='job_count',\n    size='SALARY',\n    color='SALARY',\n    hover_name='STATE_NAME',\n    hover_data={\n        'SALARY': ':,.0f',\n        'job_count': True,\n        'STATE_NAME': False\n    },\n    labels={\n        'SALARY': 'Average Salary ($)',\n        'STATE_NAME': 'State',\n        'job_count': 'Number of Jobs (Excludes Null Salaries)'\n    },\n    title='Top 10 States for Analyst Jobs (Bubble Size = Salary)',\n    color_continuous_scale='Greens'\n)\n\n# Customize the layout\nfig.update_layout(\n    width=1200,\n    height=700,\n    xaxis_tickangle=-45,\n    showlegend=True\n)\n\n# Update traces for better bubble appearance\nfig.update_traces(\n    marker=dict(\n        sizemode='diameter',\n        sizeref=2.0*max(top_10_states['SALARY'])/(15.**2),\n        sizemin=4,\n        line=dict(width=1, color='white')\n    )\n)\n\nfig_salaries.write_html(\"./figures/job_distribution_cities.html\", include_plotlyjs='cdn')\n```","srcMarkdownNoYaml":"\n\n# Introduction\n\nOur group has decided to evaluate the distribution of jobs related to techonology across the United States. In order to do this, we used a count of any jobs containing the word \"analyst\" and categorized them by state. The results of this are shown below.\n\n<div style=\"text-align: center; font-size: 18px; font-weight: bold; margin: 20px 0 40px 0;\">\nAnalyst Job Distribution Across the United States\n</div>\n\n```{python}\n#| eval: false\n#| echo: false\n#| warning: false\n#| fig-cap: \"Analyst Job Distribution Across the United States\"\n#| fig-align: center\n#| label: fig-analyst-distribution\nimport pandas as pd\nimport plotly.express as px\nimport plotly.io as pio\nimport plotly.graph_objects as go\n\n# Configure plotly for CI environments - use notebook renderer\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_white\"\n\n# Additional configuration for Quarto\nimport plotly.offline as pyo\npyo.init_notebook_mode(connected=True)\n\n# Load the data\ndf = pd.read_csv(\"./data/lightcast_job_postings.csv\")\n\n# Create nationwide data - filter for analyst jobs\nall_states_df = df[df['LOT_SPECIALIZED_OCCUPATION_NAME'].str.contains('analyst', case=False, na=False)]\n\n# Group by all states and count jobs\nall_state_counts = all_states_df.groupby('STATE_NAME').size().reset_index(name='job_count')\nall_state_counts_sorted = all_state_counts.sort_values(by='job_count', ascending=False)\n\n# Comprehensive state abbreviation mapping\nstate_abbrev_map = {\n    'Alabama': 'AL', 'Alaska': 'AK', 'Arizona': 'AZ', 'Arkansas': 'AR', 'California': 'CA',\n    'Colorado': 'CO', 'Connecticut': 'CT', 'Delaware': 'DE', 'Florida': 'FL', 'Georgia': 'GA',\n    'Hawaii': 'HI', 'Idaho': 'ID', 'Illinois': 'IL', 'Indiana': 'IN', 'Iowa': 'IA',\n    'Kansas': 'KS', 'Kentucky': 'KY', 'Louisiana': 'LA', 'Maine': 'ME', 'Maryland': 'MD',\n    'Massachusetts': 'MA', 'Michigan': 'MI', 'Minnesota': 'MN', 'Mississippi': 'MS', 'Missouri': 'MO',\n    'Montana': 'MT', 'Nebraska': 'NE', 'Nevada': 'NV', 'New Hampshire': 'NH', 'New Jersey': 'NJ',\n    'New Mexico': 'NM', 'New York': 'NY', 'North Carolina': 'NC', 'North Dakota': 'ND', 'Ohio': 'OH',\n    'Oklahoma': 'OK', 'Oregon': 'OR', 'Pennsylvania': 'PA', 'Rhode Island': 'RI', 'South Carolina': 'SC',\n    'South Dakota': 'SD', 'Tennessee': 'TN', 'Texas': 'TX', 'Utah': 'UT', 'Vermont': 'VT',\n    'Virginia': 'VA', 'Washington': 'WA', 'West Virginia': 'WV', 'Wisconsin': 'WI', 'Wyoming': 'WY',\n    'District of Columbia': 'DC'\n}\n\n# Add state abbreviations to the data\nall_state_counts_sorted['state_abbrev'] = all_state_counts_sorted['STATE_NAME'].map(state_abbrev_map)\n\n# Filter out any states that couldn't be mapped (in case of data issues)\nmapped_states = all_state_counts_sorted.dropna(subset=['state_abbrev'])\n\n# Create a choropleth map showing job counts for all states\nfig = px.choropleth(\n    mapped_states,\n    locations='state_abbrev',\n    color='job_count',\n    locationmode='USA-states',\n    color_continuous_scale=[[0, '#f0f9f9'], [0.2, '#cceeee'], [0.4, '#7dd3c0'], [0.6, '#42b883'], [0.8, '#2c8577'], [1, '#1a5d56']],\n    labels={'job_count': 'Number of Jobs', 'STATE_NAME': 'State'},\n    hover_name='STATE_NAME',\n    hover_data={'state_abbrev': False, 'job_count': True},\n    range_color=[0, mapped_states['job_count'].max()]\n)\n\n# Update layout with no title to maximize map space\nfig.update_layout(\n    geo_scope='usa',\n    width=750,\n    height=400,\n    margin=dict(t=0, b=0, l=0, r=0),\n    geo=dict(\n        projection_type='albers usa',\n        showlakes=True,\n        domain=dict(x=[0, 0.95], y=[0, 1]),\n        lakecolor='rgb(255, 255, 255)',\n        bgcolor='rgba(0,0,0,0)'\n    ),\n    coloraxis_colorbar=dict(\n        len=0.9,  # Make colorbar same height as the plot\n        thickness=20,  # Width of the colorbar\n        x=0.96,  # Position from left edge\n        y=0.5,   # Center vertically\n        yanchor='middle'\n    )\n)\n\n# Show the interactive map\nfig.write_html(\"./figures/analyst_job_distribution.html\", include_plotlyjs='cdn')\n```\n\n```{=html}\n<iframe width=\"1000\" height=\"700\" src=\"./figures/analyst_job_distribution.html\" title=\"Analyst Distribution\"></iframe>\n```\n\nAccording to the visual above, Texas and California are the two clear leaders in the total amount of jobs being offered that contain the word \"analyst\" in the title. Additionally, eastern states show a considerably greater amount of these jobs compared to western states.\n\n\n\n<div style=\"text-align: center; font-size: 18px; font-weight: bold; margin: 20px 0;\">\nAnalyst Job Distribution Across Cities in the United States\n</div>\n\n```{python}\n#| echo: false\n#| eval: false\n#| warning: false\n#| fig-cap: \"Analyst Job Distribution Across Cities in the United States\"\n#| fig-align: center\n#| label: fig-job-distribution-cities\n\n# Filter for analyst jobs from all states (not just the selected 5)\nall_states_analyst_df = df[df['LOT_SPECIALIZED_OCCUPATION_NAME'].str.contains('analyst', case=False, na=False)]\n\n# Group by CITY_NAME and count jobs for analysts\ncity_counts_jobs = all_states_analyst_df.groupby('CITY_NAME').size().reset_index(name='job_count')\n\n# Sort city_counts_jobs from greatest to least by job_count and get top 10\ncity_counts_jobs_sorted = city_counts_jobs.sort_values(by='job_count', ascending=False).head(10)\n\n# Create discrete colors for each bar\ncolors = ['#1a5d56', '#2c8577', '#42b883', '#42b883', '#7dd3c0', '#7dd3c0', '#a8e6cf', '#cceeee', '#f0f9f9', '#f0f9f9']\n\n# Create bar chart using plotly with discrete colors\nfig_cities = go.Figure(data=[\n    go.Bar(\n        x=city_counts_jobs_sorted['CITY_NAME'],\n        y=city_counts_jobs_sorted['job_count'],\n        text=city_counts_jobs_sorted['job_count'],\n        textposition='outside',\n        marker_color=colors[:len(city_counts_jobs_sorted)]\n    )\n])\n\n# Update layout and styling\nfig_cities.update_layout(\n    title='',\n    xaxis_title='City',\n    yaxis_title='Number of Jobs',\n    width=750,\n    height=400,\n    margin=dict(t=20, b=80, l=50, r=50),\n    showlegend=False,\n    xaxis=dict(tickangle=45),\n    template='plotly_white'\n)\n\n# Show the interactive chart\nfig_cities.write_html(\"./figures/job_distribution_cities.html\", include_plotlyjs='cdn')\n```\n\n```{=html}\n<iframe width=\"1000\" height=\"700\" src=\"./figures/job_distribution_cities.html\" title=\"Analyst Distribution\"></iframe>\n```\n\n\n```{python}\nimport plotly.express as px\n\nanalyst_df = df[df['LOT_SPECIALIZED_OCCUPATION_NAME'].str.contains('analyst', case=False, na=False)]\nanalyst_salary_df = analyst_df[analyst_df['SALARY'].notna()]\n\nprint(f\"Total analyst jobs: {len(analyst_df)}\")\nprint(f\"Analyst jobs with salary data: {len(analyst_salary_df)}\")\n\n# Group by state and calculate metrics\nbubble_data = analyst_salary_df.groupby('STATE_NAME').agg({\n    'SALARY': 'mean',  # Average salary for bubble size\n    'STATE_NAME': 'count'  # Count of jobs for y-axis\n}).rename(columns={'STATE_NAME': 'job_count'})\n\nbubble_data = bubble_data.reset_index()\n\nprint(f\"\\nStates with analyst salary data: {len(bubble_data)}\")\nprint(\"\\nTop 10 states by job count:\")\nprint(bubble_data.sort_values('job_count', ascending=False).head(10))\n\n# Filter to top 10 states by job count\ntop_10_states = bubble_data.sort_values('job_count', ascending=False).head(10)\n\n# Create the bubble chart\nfig = px.scatter(\n    top_10_states,\n    x='STATE_NAME',\n    y='job_count',\n    size='SALARY',\n    color='SALARY',\n    hover_name='STATE_NAME',\n    hover_data={\n        'SALARY': ':,.0f',\n        'job_count': True,\n        'STATE_NAME': False\n    },\n    labels={\n        'SALARY': 'Average Salary ($)',\n        'STATE_NAME': 'State',\n        'job_count': 'Number of Jobs (Excludes Null Salaries)'\n    },\n    title='Top 10 States for Analyst Jobs (Bubble Size = Salary)',\n    color_continuous_scale='Greens'\n)\n\n# Customize the layout\nfig.update_layout(\n    width=1200,\n    height=700,\n    xaxis_tickangle=-45,\n    showlegend=True\n)\n\n# Update traces for better bubble appearance\nfig.update_traces(\n    marker=dict(\n        sizemode='diameter',\n        sizeref=2.0*max(top_10_states['SALARY'])/(15.**2),\n        sizemin=4,\n        line=dict(width=1, color='white')\n    )\n)\n\nfig_salaries.write_html(\"./figures/job_distribution_cities.html\", include_plotlyjs='cdn')\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"output-file":"market_trends.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.31","theme":"minty","title":"Market Trends"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}