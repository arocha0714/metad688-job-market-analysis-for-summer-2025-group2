{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Market Trends\n",
        "---\n",
        "\n",
        "### Introduction\n",
        "\n",
        "Our group has decided to evaluate the distribution of jobs related to techonology across the United States. In order to do this, we used a count of any jobs containing the word \"analyst\" and categorized them by state. The results of this are shown below.\n",
        "\n",
        "<div style=\"text-align: center; font-size: 18px; font-weight: bold; margin: 20px 0 40px 0;\">\n",
        "Analyst Job Distribution Across the United States\n",
        "</div>"
      ],
      "id": "cbcf906c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| warning: false\n",
        "import pandas as pd\n",
        "import plotly.express as px\n",
        "import plotly.io as pio\n",
        "\n",
        "# Configure plotly for CI environments\n",
        "pio.renderers.default = \"png\"\n",
        "\n",
        "# Load the data\n",
        "df = pd.read_csv(\"./data/lightcast_job_postings.csv\")\n",
        "\n",
        "# Create nationwide data - filter for analyst jobs\n",
        "all_states_df = df[df['LOT_SPECIALIZED_OCCUPATION_NAME'].str.contains('analyst', case=False, na=False)]\n",
        "\n",
        "# Group by all states and count jobs\n",
        "all_state_counts = all_states_df.groupby('STATE_NAME').size().reset_index(name='job_count')\n",
        "all_state_counts_sorted = all_state_counts.sort_values(by='job_count', ascending=False)\n",
        "\n",
        "# Comprehensive state abbreviation mapping\n",
        "state_abbrev_map = {\n",
        "    'Alabama': 'AL', 'Alaska': 'AK', 'Arizona': 'AZ', 'Arkansas': 'AR', 'California': 'CA',\n",
        "    'Colorado': 'CO', 'Connecticut': 'CT', 'Delaware': 'DE', 'Florida': 'FL', 'Georgia': 'GA',\n",
        "    'Hawaii': 'HI', 'Idaho': 'ID', 'Illinois': 'IL', 'Indiana': 'IN', 'Iowa': 'IA',\n",
        "    'Kansas': 'KS', 'Kentucky': 'KY', 'Louisiana': 'LA', 'Maine': 'ME', 'Maryland': 'MD',\n",
        "    'Massachusetts': 'MA', 'Michigan': 'MI', 'Minnesota': 'MN', 'Mississippi': 'MS', 'Missouri': 'MO',\n",
        "    'Montana': 'MT', 'Nebraska': 'NE', 'Nevada': 'NV', 'New Hampshire': 'NH', 'New Jersey': 'NJ',\n",
        "    'New Mexico': 'NM', 'New York': 'NY', 'North Carolina': 'NC', 'North Dakota': 'ND', 'Ohio': 'OH',\n",
        "    'Oklahoma': 'OK', 'Oregon': 'OR', 'Pennsylvania': 'PA', 'Rhode Island': 'RI', 'South Carolina': 'SC',\n",
        "    'South Dakota': 'SD', 'Tennessee': 'TN', 'Texas': 'TX', 'Utah': 'UT', 'Vermont': 'VT',\n",
        "    'Virginia': 'VA', 'Washington': 'WA', 'West Virginia': 'WV', 'Wisconsin': 'WI', 'Wyoming': 'WY',\n",
        "    'District of Columbia': 'DC'\n",
        "}\n",
        "\n",
        "# Add state abbreviations to the data\n",
        "all_state_counts_sorted['state_abbrev'] = all_state_counts_sorted['STATE_NAME'].map(state_abbrev_map)\n",
        "\n",
        "# Filter out any states that couldn't be mapped (in case of data issues)\n",
        "mapped_states = all_state_counts_sorted.dropna(subset=['state_abbrev'])\n",
        "\n",
        "# Create a choropleth map showing job counts for all states\n",
        "fig = px.choropleth(\n",
        "    mapped_states,\n",
        "    locations='state_abbrev',\n",
        "    color='job_count',\n",
        "    locationmode='USA-states',\n",
        "    color_continuous_scale=[[0, '#f0f9f9'], [0.2, '#cceeee'], [0.4, '#7dd3c0'], [0.6, '#42b883'], [0.8, '#2c8577'], [1, '#1a5d56']],\n",
        "    labels={'job_count': 'Number of Jobs', 'STATE_NAME': 'State'},\n",
        "    hover_name='STATE_NAME',\n",
        "    hover_data={'state_abbrev': False, 'job_count': True},\n",
        "    range_color=[0, mapped_states['job_count'].max()]\n",
        ")\n",
        "\n",
        "# Update layout with no title to maximize map space\n",
        "fig.update_layout(\n",
        "    geo_scope='usa',\n",
        "    width=750,\n",
        "    height=400,\n",
        "    margin=dict(t=0, b=0, l=0, r=0),\n",
        "    geo=dict(\n",
        "        projection_type='albers usa',\n",
        "        showlakes=True,\n",
        "        domain=dict(x=[0, 0.95], y=[0, 1]),\n",
        "        lakecolor='rgb(255, 255, 255)',\n",
        "        bgcolor='rgba(0,0,0,0)'\n",
        "    ),\n",
        "    coloraxis_colorbar=dict(\n",
        "        len=0.9,  # Make colorbar same height as the plot\n",
        "        thickness=20,  # Width of the colorbar\n",
        "        x=0.96,  # Position from left edge\n",
        "        y=0.5,   # Center vertically\n",
        "        yanchor='middle'\n",
        "    )\n",
        ")\n",
        "\n",
        "# Show the interactive map\n",
        "fig.show()"
      ],
      "id": "48987bbc",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "According to the visual above, Texas and California are the two clear leaders in the total amount of jobs being offered that contain the word \"analyst\" in the title. Additionally, eastern states show a considerably greater amount of these jobs compared to western states.\n",
        "\n",
        "\n",
        "\n",
        "<div style=\"text-align: center; font-size: 18px; font-weight: bold; margin: 20px 0;\">\n",
        "Analyst Job Distribution Across Cities in the United States\n",
        "</div>"
      ],
      "id": "6125452c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| warning: false\n",
        "#| fig-align: left\n",
        "import matplotlib\n",
        "matplotlib.use('Agg')  # Use non-interactive backend for CI\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Filter for analyst jobs from all states (not just the selected 5)\n",
        "all_states_analyst_df = df[df['LOT_SPECIALIZED_OCCUPATION_NAME'].str.contains('analyst', case=False, na=False)]\n",
        "\n",
        "# Group by CITY_NAME and count jobs for analysts\n",
        "city_counts_jobs = all_states_analyst_df.groupby('CITY_NAME').size().reset_index(name='job_count')\n",
        "\n",
        "# Sort city_counts_jobs from greatest to least by job_count and get top 10\n",
        "city_counts_jobs_sorted = city_counts_jobs.sort_values(by='job_count', ascending=False).head(10)\n",
        "\n",
        "# Create a minty color palette that matches the map theme\n",
        "minty_colors = ['#1a5d56', '#2c8577', '#42b883', '#7dd3c0', '#a8e6cf', '#cceeee', '#f0f9f9', '#e8f8f5', '#d5f0e8', '#c2e8db']\n",
        "\n",
        "# Plot column chart\n",
        "plt.figure(figsize=(8, 5))\n",
        "bars = plt.bar(city_counts_jobs_sorted['CITY_NAME'], city_counts_jobs_sorted['job_count'], color=minty_colors[:len(city_counts_jobs_sorted)])\n",
        "plt.xlabel('City', fontsize=12)\n",
        "plt.ylabel('Number of Jobs', fontsize=12)\n",
        "plt.xticks(rotation=45, ha='right')\n",
        "plt.tight_layout()\n",
        "\n",
        "# Add value labels on top of bars\n",
        "for bar in bars:\n",
        "    height = bar.get_height()\n",
        "    plt.text(bar.get_x() + bar.get_width()/2., height + 10,\n",
        "             f'{int(height)}', ha='center', va='bottom', fontsize=10)\n",
        "\n",
        "plt.show()"
      ],
      "id": "78b9e6d5",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/home/ubuntu/metad688-job-market-analysis-for-summer-2025-group2-6/.venv/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}